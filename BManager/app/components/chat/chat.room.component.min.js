"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var chat_msg_object_1=require("../../objects/chat/chat.msg.object"),db_messages_constants_1=require("../../constants/db.messages.constants"),ChatRoomComponent=function(){function ChatRoomComponent(chatService){this.chatService=chatService,this._unreadMessagesCount=0,this._isStickyBottom=!0}return Object.defineProperty(ChatRoomComponent.prototype,"roomName",{get:function(){return this.department.name},enumerable:!0,configurable:!0}),Object.defineProperty(ChatRoomComponent.prototype,"unreadMessagesCount",{get:function(){return this._unreadMessagesCount},enumerable:!0,configurable:!0}),Object.defineProperty(ChatRoomComponent.prototype,"roomConversation",{get:function(){return this._roomConversation},enumerable:!0,configurable:!0}),Object.defineProperty(ChatRoomComponent.prototype,"isConversationLoaded",{get:function(){return this._isConversationLoaded},enumerable:!0,configurable:!0}),Object.defineProperty(ChatRoomComponent.prototype,"isStickyBottom",{get:function(){return this._isStickyBottom},enumerable:!0,configurable:!0}),Object.defineProperty(ChatRoomComponent.prototype,"waitLoadConversation",{get:function(){return this._waitLoadConversation},enumerable:!0,configurable:!0}),Object.defineProperty(ChatRoomComponent.prototype,"msgCount",{get:function(){return this._roomConversation?this._roomConversation.length:0},enumerable:!0,configurable:!0}),Object.defineProperty(ChatRoomComponent.prototype,"lastMsgID",{get:function(){var count=this.msgCount;if(count>0)for(var lastPos=count-1;lastPos>=0;){if(null!==this._roomConversation[lastPos].id)return this._roomConversation[lastPos].id;lastPos--}return 0},enumerable:!0,configurable:!0}),ChatRoomComponent.prototype.sendMessage=function(source,msg){var _this=this;if(this._roomConversation){var currDate=new Date,chatMsg_1=new chat_msg_object_1.ChatMsgObject(null,currDate,source,this.department,msg);this.addMessage(chatMsg_1),this.chatService.sendMessage(chatMsg_1).then(function(dbMsg){dbMsg.code===db_messages_constants_1.DbMessagesConstants.CODE_OK&&(chatMsg_1.id=dbMsg.data,_this.onMessageSendSuccess())})}},ChatRoomComponent.prototype.addMessage=function(chatMsg){this._roomConversation.push(chatMsg),this.onMessageAdded()},ChatRoomComponent.prototype.addMessages=function(data){var _this=this;data.forEach(function(chatMsg,ind,arr){_this.addMessage(chatMsg)})},ChatRoomComponent.prototype.loadConversationFromServer=function(){var _this=this;return this.chatService.getConversation(this.department).then(function(data){_this._roomConversation=data,_this._isConversationLoaded=!0,_this.onLoadConversationComplete()})},ChatRoomComponent.prototype.onSelected=function(){this.parent&&(this._unreadMessagesCount=0,this.parent.onSelected(this.roomName))},ChatRoomComponent.prototype.onLoadConversationComplete=function(){},ChatRoomComponent.prototype.onMessageSendSuccess=function(){},ChatRoomComponent.prototype.onMessageAdded=function(){this.isSelected&&this._isStickyBottom?this.scrollToBottom():this._unreadMessagesCount++},ChatRoomComponent.prototype.scrollToBottom=function(){this.parent&&this.parent.scrollToBottom(this.roomName)},ChatRoomComponent.prototype.$onInit=function(){this._waitLoadConversation=this.loadConversationFromServer(),this.parent&&this.parent.registerRoom(this.roomName,this),this.isSelected&&this.onSelected()},ChatRoomComponent.prototype.$onDestroy=function(){},ChatRoomComponent}();exports.chatRoomComponent={controller:ChatRoomComponent,controllerAs:"vm",require:{parent:"^chatRooms"},bindings:{isSelected:"<",department:"<"},template:'<div>\n                    <button type="button" class="btn btn-default btn-block btn-tab-fix"\n                            ng-class="{ \'chat-room-tab-selected\' : vm.isSelected }"\n                            ng-click="vm.onSelected()">\n                        {{ vm.roomName | translate }}\n                        <bm-badge msg="vm.unreadMessagesCount"></bm-badge>\n                    </button>\n                </div>'};